//input

// N = 11
//arr[] = {6,5,7,1,8,2,9,9,7,7,9}   array  may contain duplicate element
//target = 6


//output
->  same element can take multiple time 
->  duplicate subset not formed

//(1 1 1 1 1 1)
//(1 1 1 1 2)
//(1 1 2 2)
//(1 5)
//(2 2 2)
//(6)




/****** brute force approach********/
//first sort the given array so you can get ans in acending order 
//take a set to store subset so duplicate subset can be elemented easily by set<vector<int>>st
//if(target>=arr[i]) take and pass the same index
//else not take and pass the index+1


//c++ code


class Solution {
  public:
    
  
void solve(vector<int>&arr,set<vector<int>>&st,vector<int>&v,int t,int i){
      if(t==0){
          st.insert(v);
          return;
      }
      if(i>=arr.size())return;
      
if(t>=arr[i]){
        v.push_back(arr[i]);
        solve(arr,st,v,t-arr[i],i);
        v.pop_back();
    }
    solve(arr,st,v,t,i+1);
    return;
      
  } 
    
    
vector<vector<int> > combinationSum(vector<int> &arr, int t) {
    sort(arr.begin(),arr.end());
    
    vector<int>v;
     set<vector<int>>st;
    solve(arr,st,v,t,0);
    
     vector<vector<int>>ans;
     for(auto x:st)
      ans.push_back(x);
      
    return ans;
    }
};








/******************************second approach (optimal - solution) ************************/


// taking a for loop and if we pick first element then we can't pick 2,3,4,5 element that time and for handling duplicay we check if(i>id && arr[i]==arr[i-1])return continue;
//like {2,2,2}   if we pick first and second {2,2}  and we pick 2nd and 3rd {2,2} so their duplicay occure;


class Solution {
  public:
  
  
  void solve(vector<int> &arr,vector<vector<int>>&ans,vector<int>&v,int t,int id ){
      
     if(t==0){
         ans.push_back(v);
         return;}
     
     for(int i=id;i<arr.size();i++){
         if(t>=arr[i]){
         if(i>id && arr[i]==arr[i-1])continue;
    
         v.push_back(arr[i]);
         solve(arr,ans,v,t-arr[i],i);
         v.pop_back();
                        }
     }
      return;  
    }  
    
    
vector<vector<int> > combinationSum(vector<int> &arr, int t) {
      sort(arr.begin(),arr.end());
      vector<int>v;
      vector<vector<int>>ans;
      solve(arr,ans,v,t,0);
      
     return ans; 
    }
    
};





